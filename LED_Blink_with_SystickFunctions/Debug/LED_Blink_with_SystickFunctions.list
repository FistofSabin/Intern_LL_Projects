
LED_Blink_with_SystickFunctions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001444  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001504  08001504  00011504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001528  08001528  00011528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800152c  0800152c  0001152c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000004  08001534  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000028  08001534  00020028  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000340f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000d52  00000000  00000000  0002343b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000538  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004b0  00000000  00000000  000246c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001db8  00000000  00000000  00024b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001582  00000000  00000000  00026930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00027eb2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001184  00000000  00000000  00027f30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080014ec 	.word	0x080014ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080014ec 	.word	0x080014ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b7f      	cmp	r3, #127	; 0x7f
 8000234:	d828      	bhi.n	8000288 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000236:	4c2f      	ldr	r4, [pc, #188]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b25b      	sxtb	r3, r3
 800023e:	089b      	lsrs	r3, r3, #2
 8000240:	492c      	ldr	r1, [pc, #176]	; (80002f4 <__NVIC_SetPriority+0xd4>)
 8000242:	1dfa      	adds	r2, r7, #7
 8000244:	7812      	ldrb	r2, [r2, #0]
 8000246:	b252      	sxtb	r2, r2
 8000248:	0892      	lsrs	r2, r2, #2
 800024a:	32c0      	adds	r2, #192	; 0xc0
 800024c:	0092      	lsls	r2, r2, #2
 800024e:	5852      	ldr	r2, [r2, r1]
 8000250:	1df9      	adds	r1, r7, #7
 8000252:	7809      	ldrb	r1, [r1, #0]
 8000254:	0008      	movs	r0, r1
 8000256:	2103      	movs	r1, #3
 8000258:	4001      	ands	r1, r0
 800025a:	00c9      	lsls	r1, r1, #3
 800025c:	20ff      	movs	r0, #255	; 0xff
 800025e:	4088      	lsls	r0, r1
 8000260:	0001      	movs	r1, r0
 8000262:	43c9      	mvns	r1, r1
 8000264:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	0192      	lsls	r2, r2, #6
 800026a:	20ff      	movs	r0, #255	; 0xff
 800026c:	4010      	ands	r0, r2
 800026e:	1dfa      	adds	r2, r7, #7
 8000270:	7812      	ldrb	r2, [r2, #0]
 8000272:	0015      	movs	r5, r2
 8000274:	2203      	movs	r2, #3
 8000276:	402a      	ands	r2, r5
 8000278:	00d2      	lsls	r2, r2, #3
 800027a:	4090      	lsls	r0, r2
 800027c:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800027e:	430a      	orrs	r2, r1
 8000280:	33c0      	adds	r3, #192	; 0xc0
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	511a      	str	r2, [r3, r4]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000286:	e031      	b.n	80002ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000288:	4c1b      	ldr	r4, [pc, #108]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800028a:	1dfb      	adds	r3, r7, #7
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	001a      	movs	r2, r3
 8000290:	230f      	movs	r3, #15
 8000292:	4013      	ands	r3, r2
 8000294:	3b08      	subs	r3, #8
 8000296:	0899      	lsrs	r1, r3, #2
 8000298:	4a17      	ldr	r2, [pc, #92]	; (80002f8 <__NVIC_SetPriority+0xd8>)
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	0018      	movs	r0, r3
 80002a0:	230f      	movs	r3, #15
 80002a2:	4003      	ands	r3, r0
 80002a4:	3b08      	subs	r3, #8
 80002a6:	089b      	lsrs	r3, r3, #2
 80002a8:	3306      	adds	r3, #6
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	18d3      	adds	r3, r2, r3
 80002ae:	3304      	adds	r3, #4
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	1dfa      	adds	r2, r7, #7
 80002b4:	7812      	ldrb	r2, [r2, #0]
 80002b6:	0010      	movs	r0, r2
 80002b8:	2203      	movs	r2, #3
 80002ba:	4002      	ands	r2, r0
 80002bc:	00d2      	lsls	r2, r2, #3
 80002be:	20ff      	movs	r0, #255	; 0xff
 80002c0:	4090      	lsls	r0, r2
 80002c2:	0002      	movs	r2, r0
 80002c4:	43d2      	mvns	r2, r2
 80002c6:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	019b      	lsls	r3, r3, #6
 80002cc:	20ff      	movs	r0, #255	; 0xff
 80002ce:	4018      	ands	r0, r3
 80002d0:	1dfb      	adds	r3, r7, #7
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	001d      	movs	r5, r3
 80002d6:	2303      	movs	r3, #3
 80002d8:	402b      	ands	r3, r5
 80002da:	00db      	lsls	r3, r3, #3
 80002dc:	4098      	lsls	r0, r3
 80002de:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	431a      	orrs	r2, r3
 80002e2:	1d8b      	adds	r3, r1, #6
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	18e3      	adds	r3, r4, r3
 80002e8:	3304      	adds	r3, #4
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	b002      	add	sp, #8
 80002f2:	bdb0      	pop	{r4, r5, r7, pc}
 80002f4:	e000e100 	.word	0xe000e100
 80002f8:	e000ed00 	.word	0xe000ed00

080002fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0c      	ldr	r2, [pc, #48]	; (800033c <SysTick_Config+0x40>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d901      	bls.n	8000312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800030e:	2301      	movs	r3, #1
 8000310:	e010      	b.n	8000334 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <SysTick_Config+0x44>)
 8000314:	687a      	ldr	r2, [r7, #4]
 8000316:	3a01      	subs	r2, #1
 8000318:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800031a:	2301      	movs	r3, #1
 800031c:	425b      	negs	r3, r3
 800031e:	2103      	movs	r1, #3
 8000320:	0018      	movs	r0, r3
 8000322:	f7ff ff7d 	bl	8000220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SysTick_Config+0x44>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800032c:	4b04      	ldr	r3, [pc, #16]	; (8000340 <SysTick_Config+0x44>)
 800032e:	2207      	movs	r2, #7
 8000330:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000332:	2300      	movs	r3, #0
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010

08000344 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <LL_RCC_HSI_Enable+0x18>)
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <LL_RCC_HSI_Enable+0x18>)
 800034c:	6812      	ldr	r2, [r2, #0]
 800034e:	2101      	movs	r1, #1
 8000350:	430a      	orrs	r2, r1
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	40021000 	.word	0x40021000

08000360 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <LL_RCC_HSI_IsReady+0x1c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2204      	movs	r2, #4
 800036a:	4013      	ands	r3, r2
 800036c:	2b04      	cmp	r3, #4
 800036e:	d101      	bne.n	8000374 <LL_RCC_HSI_IsReady+0x14>
 8000370:	2301      	movs	r3, #1
 8000372:	e000      	b.n	8000376 <LL_RCC_HSI_IsReady+0x16>
 8000374:	2300      	movs	r3, #0
}
 8000376:	0018      	movs	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40021000 	.word	0x40021000

08000380 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800038a:	4a06      	ldr	r2, [pc, #24]	; (80003a4 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800038c:	6852      	ldr	r2, [r2, #4]
 800038e:	4906      	ldr	r1, [pc, #24]	; (80003a8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000390:	4011      	ands	r1, r2
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	0212      	lsls	r2, r2, #8
 8000396:	430a      	orrs	r2, r1
 8000398:	605a      	str	r2, [r3, #4]
}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000
 80003a8:	ffffe0ff 	.word	0xffffe0ff

080003ac <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <LL_RCC_SetSysClkSource+0x24>)
 80003b6:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <LL_RCC_SetSysClkSource+0x24>)
 80003b8:	68d2      	ldr	r2, [r2, #12]
 80003ba:	2103      	movs	r1, #3
 80003bc:	438a      	bics	r2, r1
 80003be:	0011      	movs	r1, r2
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	430a      	orrs	r2, r1
 80003c4:	60da      	str	r2, [r3, #12]
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b002      	add	sp, #8
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003d8:	4b03      	ldr	r3, [pc, #12]	; (80003e8 <LL_RCC_GetSysClkSource+0x14>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	220c      	movs	r2, #12
 80003de:	4013      	ands	r3, r2
}
 80003e0:	0018      	movs	r0, r3
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	40021000 	.word	0x40021000

080003ec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f6:	4a06      	ldr	r2, [pc, #24]	; (8000410 <LL_RCC_SetAHBPrescaler+0x24>)
 80003f8:	68d2      	ldr	r2, [r2, #12]
 80003fa:	21f0      	movs	r1, #240	; 0xf0
 80003fc:	438a      	bics	r2, r1
 80003fe:	0011      	movs	r1, r2
 8000400:	687a      	ldr	r2, [r7, #4]
 8000402:	430a      	orrs	r2, r1
 8000404:	60da      	str	r2, [r3, #12]
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40021000 	.word	0x40021000

08000414 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_RCC_SetAPB1Prescaler+0x20>)
 800041e:	4a05      	ldr	r2, [pc, #20]	; (8000434 <LL_RCC_SetAPB1Prescaler+0x20>)
 8000420:	68d2      	ldr	r2, [r2, #12]
 8000422:	4905      	ldr	r1, [pc, #20]	; (8000438 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000424:	4011      	ands	r1, r2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	430a      	orrs	r2, r1
 800042a:	60da      	str	r2, [r3, #12]
}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b002      	add	sp, #8
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	fffff8ff 	.word	0xfffff8ff

0800043c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000444:	4b05      	ldr	r3, [pc, #20]	; (800045c <LL_RCC_SetAPB2Prescaler+0x20>)
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <LL_RCC_SetAPB2Prescaler+0x20>)
 8000448:	68d2      	ldr	r2, [r2, #12]
 800044a:	4905      	ldr	r1, [pc, #20]	; (8000460 <LL_RCC_SetAPB2Prescaler+0x24>)
 800044c:	4011      	ands	r1, r2
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	430a      	orrs	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b002      	add	sp, #8
 800045a:	bd80      	pop	{r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	ffffc7ff 	.word	0xffffc7ff

08000464 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800046c:	4b07      	ldr	r3, [pc, #28]	; (800048c <LL_RCC_SetUSARTClockSource+0x28>)
 800046e:	4a07      	ldr	r2, [pc, #28]	; (800048c <LL_RCC_SetUSARTClockSource+0x28>)
 8000470:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000472:	6879      	ldr	r1, [r7, #4]
 8000474:	0c09      	lsrs	r1, r1, #16
 8000476:	43c9      	mvns	r1, r1
 8000478:	4011      	ands	r1, r2
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	0412      	lsls	r2, r2, #16
 800047e:	0c12      	lsrs	r2, r2, #16
 8000480:	430a      	orrs	r2, r1
 8000482:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000

08000490 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <LL_APB1_GRP1_EnableClock+0x28>)
 800049a:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <LL_APB1_GRP1_EnableClock+0x28>)
 800049c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <LL_APB1_GRP1_EnableClock+0x28>)
 80004a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	4013      	ands	r3, r2
 80004ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ae:	68fb      	ldr	r3, [r7, #12]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b004      	add	sp, #16
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000

080004bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b084      	sub	sp, #16
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004c6:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	430a      	orrs	r2, r1
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LL_APB2_GRP1_EnableClock+0x28>)
 80004d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	4013      	ands	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	46c0      	nop			; (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	b004      	add	sp, #16
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4013      	ands	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800051e:	4c0f      	ldr	r4, [pc, #60]	; (800055c <LL_SYSCFG_SetEXTISource+0x48>)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	4013      	ands	r3, r2
 8000526:	490d      	ldr	r1, [pc, #52]	; (800055c <LL_SYSCFG_SetEXTISource+0x48>)
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	20ff      	movs	r0, #255	; 0xff
 800052c:	4002      	ands	r2, r0
 800052e:	3202      	adds	r2, #2
 8000530:	0092      	lsls	r2, r2, #2
 8000532:	5852      	ldr	r2, [r2, r1]
 8000534:	6839      	ldr	r1, [r7, #0]
 8000536:	0c09      	lsrs	r1, r1, #16
 8000538:	200f      	movs	r0, #15
 800053a:	4088      	lsls	r0, r1
 800053c:	0001      	movs	r1, r0
 800053e:	43c9      	mvns	r1, r1
 8000540:	4011      	ands	r1, r2
 8000542:	683a      	ldr	r2, [r7, #0]
 8000544:	0c12      	lsrs	r2, r2, #16
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	4090      	lsls	r0, r2
 800054a:	0002      	movs	r2, r0
 800054c:	430a      	orrs	r2, r1
 800054e:	3302      	adds	r3, #2
 8000550:	009b      	lsls	r3, r3, #2
 8000552:	511a      	str	r2, [r3, r4]
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b003      	add	sp, #12
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	40010000 	.word	0x40010000

08000560 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <LL_FLASH_SetLatency+0x24>)
 800056a:	4a06      	ldr	r2, [pc, #24]	; (8000584 <LL_FLASH_SetLatency+0x24>)
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	2101      	movs	r1, #1
 8000570:	438a      	bics	r2, r1
 8000572:	0011      	movs	r1, r2
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b002      	add	sp, #8
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	40022000 	.word	0x40022000

08000588 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <LL_FLASH_GetLatency+0x14>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2201      	movs	r2, #1
 8000592:	4013      	ands	r3, r2
}
 8000594:	0018      	movs	r0, r3
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40022000 	.word	0x40022000

080005a0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <LL_PWR_SetRegulVoltageScaling+0x20>)
 80005aa:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <LL_PWR_SetRegulVoltageScaling+0x20>)
 80005ac:	6812      	ldr	r2, [r2, #0]
 80005ae:	4905      	ldr	r1, [pc, #20]	; (80005c4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80005b0:	4011      	ands	r1, r2
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	430a      	orrs	r2, r1
 80005b6:	601a      	str	r2, [r3, #0]
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b002      	add	sp, #8
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40007000 	.word	0x40007000
 80005c4:	ffffe7ff 	.word	0xffffe7ff

080005c8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2201      	movs	r2, #1
 80005d6:	431a      	orrs	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	601a      	str	r2, [r3, #0]
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b002      	add	sp, #8
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a07      	ldr	r2, [pc, #28]	; (8000610 <LL_USART_ConfigAsyncMode+0x2c>)
 80005f2:	401a      	ands	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	222a      	movs	r2, #42	; 0x2a
 80005fe:	4393      	bics	r3, r2
 8000600:	001a      	movs	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	609a      	str	r2, [r3, #8]
}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	ffffb7ff 	.word	0xffffb7ff

08000614 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6819      	ldr	r1, [r3, #0]
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	435a      	muls	r2, r3
 800062a:	0013      	movs	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	189b      	adds	r3, r3, r2
 8000630:	43db      	mvns	r3, r3
 8000632:	400b      	ands	r3, r1
 8000634:	001a      	movs	r2, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	68b9      	ldr	r1, [r7, #8]
 800063a:	434b      	muls	r3, r1
 800063c:	6879      	ldr	r1, [r7, #4]
 800063e:	434b      	muls	r3, r1
 8000640:	431a      	orrs	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b004      	add	sp, #16
 800064c:	bd80      	pop	{r7, pc}

0800064e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b084      	sub	sp, #16
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	68d9      	ldr	r1, [r3, #12]
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	68ba      	ldr	r2, [r7, #8]
 8000662:	435a      	muls	r2, r3
 8000664:	0013      	movs	r3, r2
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	189b      	adds	r3, r3, r2
 800066a:	43db      	mvns	r3, r3
 800066c:	400b      	ands	r3, r1
 800066e:	001a      	movs	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	68b9      	ldr	r1, [r7, #8]
 8000674:	434b      	muls	r3, r1
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	434b      	muls	r3, r1
 800067a:	431a      	orrs	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	60da      	str	r2, [r3, #12]
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b004      	add	sp, #16
 8000686:	bd80      	pop	{r7, pc}

08000688 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bd80      	pop	{r7, pc}

080006a0 <setLedToggleTimer>:
/* USER CODE BEGIN Includes */

uint16_t usTimeMyTime = 0;

//Created function for next projects so i don't change it by variable but with function.
void setLedToggleTimer(uint16_t usTimeMs) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0002      	movs	r2, r0
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	801a      	strh	r2, [r3, #0]
	usTimeMyTime = usTimeMs;
 80006ac:	4b03      	ldr	r3, [pc, #12]	; (80006bc <setLedToggleTimer+0x1c>)
 80006ae:	1dba      	adds	r2, r7, #6
 80006b0:	8812      	ldrh	r2, [r2, #0]
 80006b2:	801a      	strh	r2, [r3, #0]
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	b002      	add	sp, #8
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000020 	.word	0x20000020

080006c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fef9 	bl	80004bc <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ca:	2380      	movs	r3, #128	; 0x80
 80006cc:	055b      	lsls	r3, r3, #21
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff fede 	bl	8000490 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006d4:	f000 f818 	bl	8000708 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	//This function calls systick interrupt for every millisecond.
	SysTick_Config(SystemCoreClock / 1000);
 80006d8:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <main+0x44>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	0099      	lsls	r1, r3, #2
 80006e0:	0010      	movs	r0, r2
 80006e2:	f7ff fd11 	bl	8000108 <__udivsi3>
 80006e6:	0003      	movs	r3, r0
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff fe07 	bl	80002fc <SysTick_Config>


	setLedToggleTimer(2000);
 80006ee:	23fa      	movs	r3, #250	; 0xfa
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	0018      	movs	r0, r3
 80006f4:	f7ff ffd4 	bl	80006a0 <setLedToggleTimer>


	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006f8:	f000 f8c2 	bl	8000880 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80006fc:	f000 f842 	bl	8000784 <MX_USART2_UART_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000700:	e7fe      	b.n	8000700 <main+0x40>
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000000 	.word	0x20000000

08000708 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800070c:	2000      	movs	r0, #0
 800070e:	f7ff ff27 	bl	8000560 <LL_FLASH_SetLatency>
	while (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	f7ff ff38 	bl	8000588 <LL_FLASH_GetLatency>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d1fb      	bne.n	8000714 <SystemClock_Config+0xc>
	}
	LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	011b      	lsls	r3, r3, #4
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff3d 	bl	80005a0 <LL_PWR_SetRegulVoltageScaling>
	LL_RCC_HSI_Enable();
 8000726:	f7ff fe0d 	bl	8000344 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	f7ff fe18 	bl	8000360 <LL_RCC_HSI_IsReady>
 8000730:	0003      	movs	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	d1fa      	bne.n	800072c <SystemClock_Config+0x24>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8000736:	2010      	movs	r0, #16
 8000738:	f7ff fe22 	bl	8000380 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fe55 	bl	80003ec <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000742:	2000      	movs	r0, #0
 8000744:	f7ff fe66 	bl	8000414 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000748:	2000      	movs	r0, #0
 800074a:	f7ff fe77 	bl	800043c <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fe2c 	bl	80003ac <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000754:	46c0      	nop			; (mov r8, r8)
 8000756:	f7ff fe3d 	bl	80003d4 <LL_RCC_GetSysClkSource>
 800075a:	0003      	movs	r3, r0
 800075c:	2b04      	cmp	r3, #4
 800075e:	d1fa      	bne.n	8000756 <SystemClock_Config+0x4e>

	}

	LL_Init1msTick(16000000);
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <SystemClock_Config+0x78>)
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fe4e 	bl	8001404 <LL_Init1msTick>

	LL_SetSystemCoreClock(16000000);
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SystemClock_Config+0x78>)
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fe5a 	bl	8001424 <LL_SetSystemCoreClock>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000770:	23c0      	movs	r3, #192	; 0xc0
 8000772:	031b      	lsls	r3, r3, #12
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff fe75 	bl	8000464 <LL_RCC_SetUSARTClockSource>
}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	00f42400 	.word	0x00f42400

08000784 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 800078a:	231c      	movs	r3, #28
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	231c      	movs	r3, #28
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f000 fea1 	bl	80014dc <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	0018      	movs	r0, r3
 800079e:	2318      	movs	r3, #24
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f000 fe9a 	bl	80014dc <memset>

	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	029b      	lsls	r3, r3, #10
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff fe6f 	bl	8000490 <LL_APB1_GRP1_EnableClock>

	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f7ff fe98 	bl	80004e8 <LL_IOP_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA3   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2204      	movs	r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2202      	movs	r2, #2
 80007c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2203      	movs	r2, #3
 80007c8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2204      	movs	r2, #4
 80007da:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	1d3a      	adds	r2, r7, #4
 80007de:	23a0      	movs	r3, #160	; 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fac7 	bl	8000d78 <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2208      	movs	r2, #8
 80007ee:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2202      	movs	r2, #2
 80007f4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2203      	movs	r2, #3
 80007fa:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2204      	movs	r2, #4
 800080c:	615a      	str	r2, [r3, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	23a0      	movs	r3, #160	; 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 faae 	bl	8000d78 <LL_GPIO_Init>

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	USART_InitStruct.BaudRate = 115200;
 800081c:	231c      	movs	r3, #28
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	22e1      	movs	r2, #225	; 0xe1
 8000822:	0252      	lsls	r2, r2, #9
 8000824:	601a      	str	r2, [r3, #0]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000826:	231c      	movs	r3, #28
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2200      	movs	r2, #0
 800082c:	605a      	str	r2, [r3, #4]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800082e:	231c      	movs	r3, #28
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000836:	231c      	movs	r3, #28
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800083e:	231c      	movs	r3, #28
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	220c      	movs	r2, #12
 8000844:	611a      	str	r2, [r3, #16]
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000846:	231c      	movs	r3, #28
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800084e:	231c      	movs	r3, #28
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
	LL_USART_Init(USART2, &USART_InitStruct);
 8000856:	231c      	movs	r3, #28
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <MX_USART2_UART_Init+0xf8>)
 800085c:	0019      	movs	r1, r3
 800085e:	0010      	movs	r0, r2
 8000860:	f000 fd52 	bl	8001308 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_USART2_UART_Init+0xf8>)
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff febc 	bl	80005e4 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <MX_USART2_UART_Init+0xf8>)
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff feaa 	bl	80005c8 <LL_USART_Enable>
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b00e      	add	sp, #56	; 0x38
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
	LL_EXTI_InitTypeDef EXTI_InitStruct = { 0 };
 8000886:	2318      	movs	r3, #24
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	2308      	movs	r3, #8
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f000 fe23 	bl	80014dc <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000896:	003b      	movs	r3, r7
 8000898:	0018      	movs	r0, r3
 800089a:	2318      	movs	r3, #24
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f000 fe1c 	bl	80014dc <memset>

	/* GPIO Ports Clock Enable */
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOC);
 80008a4:	2004      	movs	r0, #4
 80008a6:	f7ff fe1f 	bl	80004e8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOH);
 80008aa:	2080      	movs	r0, #128	; 0x80
 80008ac:	f7ff fe1c 	bl	80004e8 <LL_IOP_GRP1_EnableClock>
	LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff fe19 	bl	80004e8 <LL_IOP_GRP1_EnableClock>

	/**/
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80008b6:	23a0      	movs	r3, #160	; 0xa0
 80008b8:	05db      	lsls	r3, r3, #23
 80008ba:	2120      	movs	r1, #32
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fee3 	bl	8000688 <LL_GPIO_ResetOutputPin>

	/**/
	LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_GPIO_Init+0xc8>)
 80008c4:	0019      	movs	r1, r3
 80008c6:	2002      	movs	r0, #2
 80008c8:	f7ff fe24 	bl	8000514 <LL_SYSCFG_SetEXTISource>

	/**/
	LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_13, LL_GPIO_PULL_NO);
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	481e      	ldr	r0, [pc, #120]	; (800094c <MX_GPIO_Init+0xcc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	0019      	movs	r1, r3
 80008d6:	f7ff feba 	bl	800064e <LL_GPIO_SetPinPull>

	/**/
	LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_13, LL_GPIO_MODE_INPUT);
 80008da:	2380      	movs	r3, #128	; 0x80
 80008dc:	019b      	lsls	r3, r3, #6
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <MX_GPIO_Init+0xcc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	0019      	movs	r1, r3
 80008e4:	f7ff fe96 	bl	8000614 <LL_GPIO_SetPinMode>

	/**/
	EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80008e8:	2318      	movs	r3, #24
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	0192      	lsls	r2, r2, #6
 80008f0:	601a      	str	r2, [r3, #0]
	EXTI_InitStruct.LineCommand = ENABLE;
 80008f2:	2318      	movs	r3, #24
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2201      	movs	r2, #1
 80008f8:	711a      	strb	r2, [r3, #4]
	EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008fa:	2318      	movs	r3, #24
 80008fc:	18fb      	adds	r3, r7, r3
 80008fe:	2200      	movs	r2, #0
 8000900:	715a      	strb	r2, [r3, #5]
	EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000902:	2318      	movs	r3, #24
 8000904:	18fb      	adds	r3, r7, r3
 8000906:	2202      	movs	r2, #2
 8000908:	719a      	strb	r2, [r3, #6]
	LL_EXTI_Init(&EXTI_InitStruct);
 800090a:	2318      	movs	r3, #24
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	0018      	movs	r0, r3
 8000910:	f000 f8f2 	bl	8000af8 <LL_EXTI_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000914:	003b      	movs	r3, r7
 8000916:	2220      	movs	r2, #32
 8000918:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800091a:	003b      	movs	r3, r7
 800091c:	2201      	movs	r2, #1
 800091e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000920:	003b      	movs	r3, r7
 8000922:	2200      	movs	r2, #0
 8000924:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000926:	003b      	movs	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800092c:	003b      	movs	r3, r7
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	003a      	movs	r2, r7
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	05db      	lsls	r3, r3, #23
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fa1c 	bl	8000d78 <LL_GPIO_Init>

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b008      	add	sp, #32
 8000946:	bd80      	pop	{r7, pc}
 8000948:	00040003 	.word	0x00040003
 800094c:	50000800 	.word	0x50000800

08000950 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	4013      	ands	r3, r2
 8000966:	041a      	lsls	r2, r3, #16
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	43db      	mvns	r3, r3
 800096c:	6839      	ldr	r1, [r7, #0]
 800096e:	400b      	ands	r3, r1
 8000970:	431a      	orrs	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	619a      	str	r2, [r3, #24]
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b004      	add	sp, #16
 800097c:	bd80      	pop	{r7, pc}

0800097e <NMI_Handler>:
/**
 * @brief This function handles Non maskable interrupt.
 */
void
NMI_Handler ( void )
{
 800097e:	b580      	push	{r7, lr}
 8000980:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while ( 1 )
 8000982:	e7fe      	b.n	8000982 <NMI_Handler+0x4>

08000984 <HardFault_Handler>:
/**
 * @brief This function handles Hard fault interrupt.
 */
void
HardFault_Handler ( void )
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while ( 1 )
 8000988:	e7fe      	b.n	8000988 <HardFault_Handler+0x4>

0800098a <SVC_Handler>:
/**
 * @brief This function handles System service call via SWI instruction.
 */
void
SVC_Handler ( void )
{
 800098a:	b580      	push	{r7, lr}
 800098c:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <PendSV_Handler>:
/**
 * @brief This function handles Pendable request for system service.
 */
void
PendSV_Handler ( void )
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <SysTick_Handler>:
/**
 * @brief This function handles System tick timer.
 */
void
SysTick_Handler ( void )
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	//creating a counter so when it reachs to value of it toggles the led.
	static uint32_t counter = 0;
	counter++;
 80009a4:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <SysTick_Handler+0x34>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <SysTick_Handler+0x34>)
 80009ac:	601a      	str	r2, [r3, #0]
	if ( (counter == usTimeMyTime) )
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <SysTick_Handler+0x38>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	001a      	movs	r2, r3
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <SysTick_Handler+0x34>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d108      	bne.n	80009ce <SysTick_Handler+0x2e>
	{
		LL_GPIO_TogglePin ( GPIOA, LL_GPIO_PIN_5 );
 80009bc:	23a0      	movs	r3, #160	; 0xa0
 80009be:	05db      	lsls	r3, r3, #23
 80009c0:	2120      	movs	r1, #32
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff ffc4 	bl	8000950 <LL_GPIO_TogglePin>
		counter = 0;
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <SysTick_Handler+0x34>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000024 	.word	0x20000024
 80009d8:	20000020 	.word	0x20000020

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <LL_EXTI_EnableIT_0_31+0x1c>)
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <LL_EXTI_EnableIT_0_31+0x1c>)
 80009f4:	6811      	ldr	r1, [r2, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	430a      	orrs	r2, r1
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b002      	add	sp, #8
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40010400 	.word	0x40010400

08000a08 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <LL_EXTI_DisableIT_0_31+0x20>)
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <LL_EXTI_DisableIT_0_31+0x20>)
 8000a14:	6812      	ldr	r2, [r2, #0]
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	43c9      	mvns	r1, r1
 8000a1a:	400a      	ands	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40010400 	.word	0x40010400

08000a2c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000a36:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8000a38:	6851      	ldr	r1, [r2, #4]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]

}
 8000a40:	46c0      	nop			; (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40010400 	.word	0x40010400

08000a4c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <LL_EXTI_DisableEvent_0_31+0x20>)
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <LL_EXTI_DisableEvent_0_31+0x20>)
 8000a58:	6852      	ldr	r2, [r2, #4]
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	43c9      	mvns	r1, r1
 8000a5e:	400a      	ands	r2, r1
 8000a60:	605a      	str	r2, [r3, #4]
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b002      	add	sp, #8
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	40010400 	.word	0x40010400

08000a70 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8000a7c:	6891      	ldr	r1, [r2, #8]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	609a      	str	r2, [r3, #8]

}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40010400 	.word	0x40010400

08000a90 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8000a9c:	6892      	ldr	r2, [r2, #8]
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	43c9      	mvns	r1, r1
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	609a      	str	r2, [r3, #8]

}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40010400 	.word	0x40010400

08000ab4 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8000ac0:	68d1      	ldr	r1, [r2, #12]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	60da      	str	r2, [r3, #12]
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b002      	add	sp, #8
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8000ae0:	68d2      	ldr	r2, [r2, #12]
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	43c9      	mvns	r1, r1
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	60da      	str	r2, [r3, #12]
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	40010400 	.word	0x40010400

08000af8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	791b      	ldrb	r3, [r3, #4]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d064      	beq.n	8000bda <LL_EXTI_Init+0xe2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d06a      	beq.n	8000bee <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d00e      	beq.n	8000b3e <LL_EXTI_Init+0x46>
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d017      	beq.n	8000b54 <LL_EXTI_Init+0x5c>
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d120      	bne.n	8000b6a <LL_EXTI_Init+0x72>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff8d 	bl	8000a4c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ff56 	bl	80009e8 <LL_EXTI_EnableIT_0_31>
          break;
 8000b3c:	e01a      	b.n	8000b74 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff60 	bl	8000a08 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff6d 	bl	8000a2c <LL_EXTI_EnableEvent_0_31>
          break;
 8000b52:	e00f      	b.n	8000b74 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f7ff ff45 	bl	80009e8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff ff62 	bl	8000a2c <LL_EXTI_EnableEvent_0_31>
          break;
 8000b68:	e004      	b.n	8000b74 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
          break;
 8000b72:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	799b      	ldrb	r3, [r3, #6]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d038      	beq.n	8000bee <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	799b      	ldrb	r3, [r3, #6]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d00e      	beq.n	8000ba2 <LL_EXTI_Init+0xaa>
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d017      	beq.n	8000bb8 <LL_EXTI_Init+0xc0>
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d120      	bne.n	8000bce <LL_EXTI_Init+0xd6>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff ff9f 	bl	8000ad4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff68 	bl	8000a70 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000ba0:	e025      	b.n	8000bee <LL_EXTI_Init+0xf6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff ff72 	bl	8000a90 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff ff7f 	bl	8000ab4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000bb6:	e01a      	b.n	8000bee <LL_EXTI_Init+0xf6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff57 	bl	8000a70 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff ff74 	bl	8000ab4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000bcc:	e00f      	b.n	8000bee <LL_EXTI_Init+0xf6>
          default:
            status = ERROR;
 8000bce:	230f      	movs	r3, #15
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
            break;
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	e009      	b.n	8000bee <LL_EXTI_Init+0xf6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff12 	bl	8000a08 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ff2f 	bl	8000a4c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b004      	add	sp, #16
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <LL_GPIO_SetPinMode>:
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6819      	ldr	r1, [r3, #0]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	435a      	muls	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	400b      	ands	r3, r1
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	434b      	muls	r3, r1
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	434b      	muls	r3, r1
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b004      	add	sp, #16
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <LL_GPIO_SetPinOutputType>:
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	434b      	muls	r3, r1
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	605a      	str	r2, [r3, #4]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b004      	add	sp, #16
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <LL_GPIO_SetPinSpeed>:
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6899      	ldr	r1, [r3, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	435a      	muls	r2, r3
 8000c76:	0013      	movs	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	189b      	adds	r3, r3, r2
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	400b      	ands	r3, r1
 8000c80:	001a      	movs	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	68b9      	ldr	r1, [r7, #8]
 8000c86:	434b      	muls	r3, r1
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	434b      	muls	r3, r1
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	609a      	str	r2, [r3, #8]
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <LL_GPIO_SetPinPull>:
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b084      	sub	sp, #16
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	68d9      	ldr	r1, [r3, #12]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	435a      	muls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	189b      	adds	r3, r3, r2
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	400b      	ands	r3, r1
 8000cba:	001a      	movs	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	68b9      	ldr	r1, [r7, #8]
 8000cc0:	434b      	muls	r3, r1
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	434b      	muls	r3, r1
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	60da      	str	r2, [r3, #12]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <LL_GPIO_SetAFPin_0_7>:
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	6a19      	ldr	r1, [r3, #32]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	4353      	muls	r3, r2
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4353      	muls	r3, r2
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	435a      	muls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	434b      	muls	r3, r1
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	434b      	muls	r3, r1
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	434b      	muls	r3, r1
 8000d0c:	6879      	ldr	r1, [r7, #4]
 8000d0e:	434b      	muls	r3, r1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	621a      	str	r2, [r3, #32]
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <LL_GPIO_SetAFPin_8_15>:
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b084      	sub	sp, #16
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	0a12      	lsrs	r2, r2, #8
 8000d36:	4353      	muls	r3, r2
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	0a12      	lsrs	r2, r2, #8
 8000d3c:	4353      	muls	r3, r2
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	0a12      	lsrs	r2, r2, #8
 8000d42:	435a      	muls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	1a9b      	subs	r3, r3, r2
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	400b      	ands	r3, r1
 8000d4e:	001a      	movs	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	0a09      	lsrs	r1, r1, #8
 8000d58:	434b      	muls	r3, r1
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	0a09      	lsrs	r1, r1, #8
 8000d5e:	434b      	muls	r3, r1
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	0a09      	lsrs	r1, r1, #8
 8000d64:	434b      	muls	r3, r1
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	434b      	muls	r3, r1
 8000d6a:	431a      	orrs	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b004      	add	sp, #16
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d8a:	e048      	b.n	8000e1e <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4091      	lsls	r1, r2
 8000d96:	000a      	movs	r2, r1
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d03a      	beq.n	8000e18 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d003      	beq.n	8000db2 <LL_GPIO_Init+0x3a>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10e      	bne.n	8000dd0 <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff ff50 	bl	8000c60 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	6819      	ldr	r1, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff33 	bl	8000c36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff ff5e 	bl	8000c9a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d111      	bne.n	8000e0a <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d807      	bhi.n	8000dfc <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	0018      	movs	r0, r3
 8000df6:	f7ff ff6d 	bl	8000cd4 <LL_GPIO_SetAFPin_0_7>
 8000dfa:	e006      	b.n	8000e0a <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	695a      	ldr	r2, [r3, #20]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ff8a 	bl	8000d1e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	68b9      	ldr	r1, [r7, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	0018      	movs	r0, r3
 8000e14:	f7ff fef2 	bl	8000bfc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	40da      	lsrs	r2, r3
 8000e26:	1e13      	subs	r3, r2, #0
 8000e28:	d1b0      	bne.n	8000d8c <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <LL_RCC_HSI_IsReady>:
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <LL_RCC_HSI_IsReady+0x1c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b04      	cmp	r3, #4
 8000e42:	d101      	bne.n	8000e48 <LL_RCC_HSI_IsReady+0x14>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <LL_RCC_HSI_IsReady+0x16>
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000

08000e54 <LL_RCC_LSE_IsReady>:
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <LL_RCC_LSE_IsReady+0x24>)
 8000e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	401a      	ands	r2, r3
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d101      	bne.n	8000e6e <LL_RCC_LSE_IsReady+0x1a>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <LL_RCC_LSE_IsReady+0x1c>
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000

08000e7c <LL_RCC_MSI_GetRange>:
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <LL_RCC_MSI_GetRange+0x14>)
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	23e0      	movs	r3, #224	; 0xe0
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	4013      	ands	r3, r2
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000

08000e94 <LL_RCC_GetSysClkSource>:
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <LL_RCC_GetSysClkSource+0x14>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	220c      	movs	r2, #12
 8000e9e:	4013      	ands	r3, r2
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000

08000eac <LL_RCC_GetAHBPrescaler>:
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <LL_RCC_GetAHBPrescaler+0x14>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	22f0      	movs	r2, #240	; 0xf0
 8000eb6:	4013      	ands	r3, r2
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <LL_RCC_GetAPB1Prescaler>:
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	23e0      	movs	r3, #224	; 0xe0
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4013      	ands	r3, r2
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_GetAPB2Prescaler>:
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	23e0      	movs	r3, #224	; 0xe0
 8000ee6:	019b      	lsls	r3, r3, #6
 8000ee8:	4013      	ands	r3, r2
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <LL_RCC_GetUSARTClockSource+0x20>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	401a      	ands	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	4313      	orrs	r3, r2
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40021000 	.word	0x40021000

08000f18 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <LL_RCC_PLL_GetMainSource+0x14>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	4013      	ands	r3, r2
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	23f0      	movs	r3, #240	; 0xf0
 8000f3a:	039b      	lsls	r3, r3, #14
 8000f3c:	4013      	ands	r3, r2
}
 8000f3e:	0018      	movs	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <LL_RCC_PLL_GetDivider+0x14>)
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	4013      	ands	r3, r2
}
 8000f56:	0018      	movs	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2210      	movs	r2, #16
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d101      	bne.n	8000f74 <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000

08000f80 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CCIPR_USART1SEL)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d138      	bne.n	8001004 <LL_RCC_GetUSARTClockFreq+0x84>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ffad 	bl	8000ef4 <LL_RCC_GetUSARTClockSource>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	4a3a      	ldr	r2, [pc, #232]	; (8001088 <LL_RCC_GetUSARTClockFreq+0x108>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00a      	beq.n	8000fb8 <LL_RCC_GetUSARTClockFreq+0x38>
 8000fa2:	4a3a      	ldr	r2, [pc, #232]	; (800108c <LL_RCC_GetUSARTClockFreq+0x10c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d015      	beq.n	8000fd4 <LL_RCC_GetUSARTClockFreq+0x54>
 8000fa8:	4a39      	ldr	r2, [pc, #228]	; (8001090 <LL_RCC_GetUSARTClockFreq+0x110>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d11a      	bne.n	8000fe4 <LL_RCC_GetUSARTClockFreq+0x64>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000fae:	f000 f87b 	bl	80010a8 <RCC_GetSystemClockFreq>
 8000fb2:	0003      	movs	r3, r0
 8000fb4:	60fb      	str	r3, [r7, #12]
        break;
 8000fb6:	e025      	b.n	8001004 <LL_RCC_GetUSARTClockFreq+0x84>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8000fb8:	f7ff ff3c 	bl	8000e34 <LL_RCC_HSI_IsReady>
 8000fbc:	1e03      	subs	r3, r0, #0
 8000fbe:	d01e      	beq.n	8000ffe <LL_RCC_GetUSARTClockFreq+0x7e>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8000fc0:	f7ff ffce 	bl	8000f60 <LL_RCC_IsActiveFlag_HSIDIV>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d002      	beq.n	8000fce <LL_RCC_GetUSARTClockFreq+0x4e>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8000fc8:	4b32      	ldr	r3, [pc, #200]	; (8001094 <LL_RCC_GetUSARTClockFreq+0x114>)
 8000fca:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8000fcc:	e017      	b.n	8000ffe <LL_RCC_GetUSARTClockFreq+0x7e>
            usart_frequency = HSI_VALUE;
 8000fce:	4b32      	ldr	r3, [pc, #200]	; (8001098 <LL_RCC_GetUSARTClockFreq+0x118>)
 8000fd0:	60fb      	str	r3, [r7, #12]
        break;
 8000fd2:	e014      	b.n	8000ffe <LL_RCC_GetUSARTClockFreq+0x7e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8000fd4:	f7ff ff3e 	bl	8000e54 <LL_RCC_LSE_IsReady>
 8000fd8:	1e03      	subs	r3, r0, #0
 8000fda:	d012      	beq.n	8001002 <LL_RCC_GetUSARTClockFreq+0x82>
        {
          usart_frequency = LSE_VALUE;
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000fe2:	e00e      	b.n	8001002 <LL_RCC_GetUSARTClockFreq+0x82>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000fe4:	f000 f860 	bl	80010a8 <RCC_GetSystemClockFreq>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f8a0 	bl	8001130 <RCC_GetHCLKClockFreq>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f8c6 	bl	8001184 <RCC_GetPCLK2ClockFreq>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	60fb      	str	r3, [r7, #12]
        break;
 8000ffc:	e002      	b.n	8001004 <LL_RCC_GetUSARTClockFreq+0x84>
        break;
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	e000      	b.n	8001004 <LL_RCC_GetUSARTClockFreq+0x84>
        break;
 8001002:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d138      	bne.n	800107c <LL_RCC_GetUSARTClockFreq+0xfc>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff71 	bl	8000ef4 <LL_RCC_GetUSARTClockSource>
 8001012:	0003      	movs	r3, r0
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <LL_RCC_GetUSARTClockFreq+0x11c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d00a      	beq.n	8001030 <LL_RCC_GetUSARTClockFreq+0xb0>
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <LL_RCC_GetUSARTClockFreq+0x120>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d015      	beq.n	800104c <LL_RCC_GetUSARTClockFreq+0xcc>
 8001020:	4a20      	ldr	r2, [pc, #128]	; (80010a4 <LL_RCC_GetUSARTClockFreq+0x124>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d11a      	bne.n	800105c <LL_RCC_GetUSARTClockFreq+0xdc>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001026:	f000 f83f 	bl	80010a8 <RCC_GetSystemClockFreq>
 800102a:	0003      	movs	r3, r0
 800102c:	60fb      	str	r3, [r7, #12]
        break;
 800102e:	e025      	b.n	800107c <LL_RCC_GetUSARTClockFreq+0xfc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001030:	f7ff ff00 	bl	8000e34 <LL_RCC_HSI_IsReady>
 8001034:	1e03      	subs	r3, r0, #0
 8001036:	d01e      	beq.n	8001076 <LL_RCC_GetUSARTClockFreq+0xf6>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001038:	f7ff ff92 	bl	8000f60 <LL_RCC_IsActiveFlag_HSIDIV>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d002      	beq.n	8001046 <LL_RCC_GetUSARTClockFreq+0xc6>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <LL_RCC_GetUSARTClockFreq+0x114>)
 8001042:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001044:	e017      	b.n	8001076 <LL_RCC_GetUSARTClockFreq+0xf6>
            usart_frequency = HSI_VALUE;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <LL_RCC_GetUSARTClockFreq+0x118>)
 8001048:	60fb      	str	r3, [r7, #12]
        break;
 800104a:	e014      	b.n	8001076 <LL_RCC_GetUSARTClockFreq+0xf6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800104c:	f7ff ff02 	bl	8000e54 <LL_RCC_LSE_IsReady>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d012      	beq.n	800107a <LL_RCC_GetUSARTClockFreq+0xfa>
        {
          usart_frequency = LSE_VALUE;
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	60fb      	str	r3, [r7, #12]
        }
        break;
 800105a:	e00e      	b.n	800107a <LL_RCC_GetUSARTClockFreq+0xfa>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800105c:	f000 f824 	bl	80010a8 <RCC_GetSystemClockFreq>
 8001060:	0003      	movs	r3, r0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f864 	bl	8001130 <RCC_GetHCLKClockFreq>
 8001068:	0003      	movs	r3, r0
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f876 	bl	800115c <RCC_GetPCLK1ClockFreq>
 8001070:	0003      	movs	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
        break;
 8001074:	e002      	b.n	800107c <LL_RCC_GetUSARTClockFreq+0xfc>
        break;
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	e000      	b.n	800107c <LL_RCC_GetUSARTClockFreq+0xfc>
        break;
 800107a:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 800107c:	68fb      	ldr	r3, [r7, #12]
}
 800107e:	0018      	movs	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	b004      	add	sp, #16
 8001084:	bd80      	pop	{r7, pc}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	00030002 	.word	0x00030002
 800108c:	00030003 	.word	0x00030003
 8001090:	00030001 	.word	0x00030001
 8001094:	003d0900 	.word	0x003d0900
 8001098:	00f42400 	.word	0x00f42400
 800109c:	000c0008 	.word	0x000c0008
 80010a0:	000c000c 	.word	0x000c000c
 80010a4:	000c0004 	.word	0x000c0004

080010a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010ae:	f7ff fef1 	bl	8000e94 <LL_RCC_GetSysClkSource>
 80010b2:	0003      	movs	r3, r0
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d013      	beq.n	80010e0 <RCC_GetSystemClockFreq+0x38>
 80010b8:	d802      	bhi.n	80010c0 <RCC_GetSystemClockFreq+0x18>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <RCC_GetSystemClockFreq+0x22>
 80010be:	e021      	b.n	8001104 <RCC_GetSystemClockFreq+0x5c>
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d017      	beq.n	80010f4 <RCC_GetSystemClockFreq+0x4c>
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d018      	beq.n	80010fa <RCC_GetSystemClockFreq+0x52>
 80010c8:	e01c      	b.n	8001104 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80010ca:	f7ff fed7 	bl	8000e7c <LL_RCC_MSI_GetRange>
 80010ce:	0003      	movs	r3, r0
 80010d0:	0b5b      	lsrs	r3, r3, #13
 80010d2:	3301      	adds	r3, #1
 80010d4:	2280      	movs	r2, #128	; 0x80
 80010d6:	0212      	lsls	r2, r2, #8
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	607b      	str	r3, [r7, #4]
      break;
 80010de:	e01c      	b.n	800111a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80010e0:	f7ff ff3e 	bl	8000f60 <LL_RCC_IsActiveFlag_HSIDIV>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d002      	beq.n	80010ee <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <RCC_GetSystemClockFreq+0x7c>)
 80010ea:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 80010ec:	e015      	b.n	800111a <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <RCC_GetSystemClockFreq+0x80>)
 80010f0:	607b      	str	r3, [r7, #4]
      break;
 80010f2:	e012      	b.n	800111a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <RCC_GetSystemClockFreq+0x84>)
 80010f6:	607b      	str	r3, [r7, #4]
      break;
 80010f8:	e00f      	b.n	800111a <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80010fa:	f000 f857 	bl	80011ac <RCC_PLL_GetFreqDomain_SYS>
 80010fe:	0003      	movs	r3, r0
 8001100:	607b      	str	r3, [r7, #4]
      break;
 8001102:	e00a      	b.n	800111a <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001104:	f7ff feba 	bl	8000e7c <LL_RCC_MSI_GetRange>
 8001108:	0003      	movs	r3, r0
 800110a:	0b5b      	lsrs	r3, r3, #13
 800110c:	3301      	adds	r3, #1
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	0212      	lsls	r2, r2, #8
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	607b      	str	r3, [r7, #4]
      break;
 8001118:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b002      	add	sp, #8
 8001122:	bd80      	pop	{r7, pc}
 8001124:	003d0900 	.word	0x003d0900
 8001128:	00f42400 	.word	0x00f42400
 800112c:	007a1200 	.word	0x007a1200

08001130 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001138:	f7ff feb8 	bl	8000eac <LL_RCC_GetAHBPrescaler>
 800113c:	0003      	movs	r3, r0
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	220f      	movs	r2, #15
 8001142:	4013      	ands	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <RCC_GetHCLKClockFreq+0x28>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	001a      	movs	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	40d3      	lsrs	r3, r2
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	08001504 	.word	0x08001504

0800115c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001164:	f7ff feae 	bl	8000ec4 <LL_RCC_GetAPB1Prescaler>
 8001168:	0003      	movs	r3, r0
 800116a:	0a1b      	lsrs	r3, r3, #8
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <RCC_GetPCLK1ClockFreq+0x24>)
 800116e:	5cd3      	ldrb	r3, [r2, r3]
 8001170:	001a      	movs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	40d3      	lsrs	r3, r2
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	08001514 	.word	0x08001514

08001184 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800118c:	f7ff fea6 	bl	8000edc <LL_RCC_GetAPB2Prescaler>
 8001190:	0003      	movs	r3, r0
 8001192:	0adb      	lsrs	r3, r3, #11
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <RCC_GetPCLK2ClockFreq+0x24>)
 8001196:	5cd3      	ldrb	r3, [r2, r3]
 8001198:	001a      	movs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	40d3      	lsrs	r3, r2
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	08001514 	.word	0x08001514

080011ac <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80011b2:	f7ff feb1 	bl	8000f18 <LL_RCC_PLL_GetMainSource>
 80011b6:	0003      	movs	r3, r0
 80011b8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d109      	bne.n	80011d4 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 80011c0:	f7ff fece 	bl	8000f60 <LL_RCC_IsActiveFlag_HSIDIV>
 80011c4:	1e03      	subs	r3, r0, #0
 80011c6:	d002      	beq.n	80011ce <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80011ca:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 80011cc:	e005      	b.n	80011da <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80011d0:	607b      	str	r3, [r7, #4]
      break;
 80011d2:	e002      	b.n	80011da <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80011d6:	607b      	str	r3, [r7, #4]
      break;
 80011d8:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 80011da:	f7ff fea9 	bl	8000f30 <LL_RCC_PLL_GetMultiplicator>
 80011de:	0003      	movs	r3, r0
 80011e0:	0c9b      	lsrs	r3, r3, #18
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	001a      	movs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4353      	muls	r3, r2
 80011ec:	001c      	movs	r4, r3
 80011ee:	f7ff feab 	bl	8000f48 <LL_RCC_PLL_GetDivider>
 80011f2:	0003      	movs	r3, r0
 80011f4:	0d9b      	lsrs	r3, r3, #22
 80011f6:	3301      	adds	r3, #1
 80011f8:	0019      	movs	r1, r3
 80011fa:	0020      	movs	r0, r4
 80011fc:	f7fe ff84 	bl	8000108 <__udivsi3>
 8001200:	0003      	movs	r3, r0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b003      	add	sp, #12
 8001208:	bd90      	pop	{r4, r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	003d0900 	.word	0x003d0900
 8001210:	00f42400 	.word	0x00f42400
 8001214:	007a1200 	.word	0x007a1200
 8001218:	0800151c 	.word	0x0800151c

0800121c <LL_USART_IsEnabled>:
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2201      	movs	r2, #1
 800122a:	4013      	ands	r3, r2
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <LL_USART_IsEnabled+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_USART_IsEnabled+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <LL_USART_SetStopBitsLength>:
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <LL_USART_SetStopBitsLength+0x24>)
 8001250:	401a      	ands	r2, r3
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	605a      	str	r2, [r3, #4]
}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	46bd      	mov	sp, r7
 800125e:	b002      	add	sp, #8
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	ffffcfff 	.word	0xffffcfff

08001268 <LL_USART_SetHWFlowCtrl>:
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <LL_USART_SetHWFlowCtrl+0x24>)
 8001278:	401a      	ands	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	fffffcff 	.word	0xfffffcff

08001290 <LL_USART_SetBaudRate>:
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d11c      	bne.n	80012e2 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	005a      	lsls	r2, r3, #1
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	085b      	lsrs	r3, r3, #1
 80012b0:	18d3      	adds	r3, r2, r3
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7fe ff27 	bl	8000108 <__udivsi3>
 80012ba:	0003      	movs	r3, r0
 80012bc:	b29b      	uxth	r3, r3
 80012be:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <LL_USART_SetBaudRate+0x74>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	085b      	lsrs	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	001a      	movs	r2, r3
 80012d0:	2307      	movs	r3, #7
 80012d2:	4013      	ands	r3, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	60da      	str	r2, [r3, #12]
}
 80012e0:	e00c      	b.n	80012fc <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	085a      	lsrs	r2, r3, #1
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	18d3      	adds	r3, r2, r3
 80012ea:	6839      	ldr	r1, [r7, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7fe ff0b 	bl	8000108 <__udivsi3>
 80012f2:	0003      	movs	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	001a      	movs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	60da      	str	r2, [r3, #12]
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0000fff0 	.word	0x0000fff0

08001308 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001312:	230f      	movs	r3, #15
 8001314:	18fb      	adds	r3, r7, r3
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff ff7b 	bl	800121c <LL_USART_IsEnabled>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d145      	bne.n	80013b6 <LL_USART_Init+0xae>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a25      	ldr	r2, [pc, #148]	; (80013c4 <LL_USART_Init+0xbc>)
 8001330:	401a      	ands	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	6859      	ldr	r1, [r3, #4]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4319      	orrs	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	4319      	orrs	r1, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	430b      	orrs	r3, r1
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0011      	movs	r1, r2
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff72 	bl	8001240 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	695a      	ldr	r2, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ff7f 	bl	8001268 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
#if defined(USART1)
    if (USARTx == USART1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <LL_USART_Init+0xc0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d105      	bne.n	800137e <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001372:	2003      	movs	r0, #3
 8001374:	f7ff fe04 	bl	8000f80 <LL_RCC_GetUSARTClockFreq>
 8001378:	0003      	movs	r3, r0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	e008      	b.n	8001390 <LL_USART_Init+0x88>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a12      	ldr	r2, [pc, #72]	; (80013cc <LL_USART_Init+0xc4>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d104      	bne.n	8001390 <LL_USART_Init+0x88>
#else
    if (USARTx == USART2)
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001386:	200c      	movs	r0, #12
 8001388:	f7ff fdfa 	bl	8000f80 <LL_RCC_GetUSARTClockFreq>
 800138c:	0003      	movs	r3, r0
 800138e:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00f      	beq.n	80013b6 <LL_USART_Init+0xae>
        && (USART_InitStruct->BaudRate != 0U))
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <LL_USART_Init+0xae>
    {
      status = SUCCESS;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	699a      	ldr	r2, [r3, #24]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68b9      	ldr	r1, [r7, #8]
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff6d 	bl	8001290 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80013b6:	230f      	movs	r3, #15
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	781b      	ldrb	r3, [r3, #0]
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b004      	add	sp, #16
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	efff69f3 	.word	0xefff69f3
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40004400 	.word	0x40004400

080013d0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80013da:	4c09      	ldr	r4, [pc, #36]	; (8001400 <LL_InitTick+0x30>)
 80013dc:	6839      	ldr	r1, [r7, #0]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7fe fe92 	bl	8000108 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6063      	str	r3, [r4, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <LL_InitTick+0x30>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <LL_InitTick+0x30>)
 80013f2:	2205      	movs	r2, #5
 80013f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b003      	add	sp, #12
 80013fc:	bd90      	pop	{r4, r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	e000e010 	.word	0xe000e010

08001404 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800140c:	23fa      	movs	r3, #250	; 0xfa
 800140e:	009a      	lsls	r2, r3, #2
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	0011      	movs	r1, r2
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff ffdb 	bl	80013d0 <LL_InitTick>
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800142c:	4b03      	ldr	r3, [pc, #12]	; (800143c <LL_SetSystemCoreClock+0x18>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	601a      	str	r2, [r3, #0]
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	20000000 	.word	0x20000000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001442:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490e      	ldr	r1, [pc, #56]	; (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0b      	ldr	r4, [pc, #44]	; (800148c <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800146a:	f7ff fab7 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f000 f811 	bl	8001494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff f925 	bl	80006c0 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   r0, =_estack
 8001478:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001484:	08001530 	.word	0x08001530
  ldr r2, =_sbss
 8001488:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800148c:	20000028 	.word	0x20000028

08001490 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_COMP_IRQHandler>
	...

08001494 <__libc_init_array>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	2600      	movs	r6, #0
 8001498:	4d0c      	ldr	r5, [pc, #48]	; (80014cc <__libc_init_array+0x38>)
 800149a:	4c0d      	ldr	r4, [pc, #52]	; (80014d0 <__libc_init_array+0x3c>)
 800149c:	1b64      	subs	r4, r4, r5
 800149e:	10a4      	asrs	r4, r4, #2
 80014a0:	42a6      	cmp	r6, r4
 80014a2:	d109      	bne.n	80014b8 <__libc_init_array+0x24>
 80014a4:	2600      	movs	r6, #0
 80014a6:	f000 f821 	bl	80014ec <_init>
 80014aa:	4d0a      	ldr	r5, [pc, #40]	; (80014d4 <__libc_init_array+0x40>)
 80014ac:	4c0a      	ldr	r4, [pc, #40]	; (80014d8 <__libc_init_array+0x44>)
 80014ae:	1b64      	subs	r4, r4, r5
 80014b0:	10a4      	asrs	r4, r4, #2
 80014b2:	42a6      	cmp	r6, r4
 80014b4:	d105      	bne.n	80014c2 <__libc_init_array+0x2e>
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	00b3      	lsls	r3, r6, #2
 80014ba:	58eb      	ldr	r3, [r5, r3]
 80014bc:	4798      	blx	r3
 80014be:	3601      	adds	r6, #1
 80014c0:	e7ee      	b.n	80014a0 <__libc_init_array+0xc>
 80014c2:	00b3      	lsls	r3, r6, #2
 80014c4:	58eb      	ldr	r3, [r5, r3]
 80014c6:	4798      	blx	r3
 80014c8:	3601      	adds	r6, #1
 80014ca:	e7f2      	b.n	80014b2 <__libc_init_array+0x1e>
 80014cc:	08001528 	.word	0x08001528
 80014d0:	08001528 	.word	0x08001528
 80014d4:	08001528 	.word	0x08001528
 80014d8:	0800152c 	.word	0x0800152c

080014dc <memset>:
 80014dc:	0003      	movs	r3, r0
 80014de:	1882      	adds	r2, r0, r2
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d100      	bne.n	80014e6 <memset+0xa>
 80014e4:	4770      	bx	lr
 80014e6:	7019      	strb	r1, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	e7f9      	b.n	80014e0 <memset+0x4>

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
